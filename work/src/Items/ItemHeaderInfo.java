package Items;

import java.util.Objects;

/**
 * Stores only a bare-bones amount of information on a particular item.  Useful when using a
 *   mostly decentralized server model for the central server item store (only stores information
 *   likely to change frequently or is otherwise vital to store centrally).
 */
public class ItemHeaderInfo {
    //open data container (public fields) not normally recommended, but fine for a simple container
    public int itemID, picID;
    public long count;
    public String name;

    //default generated constructor
    public ItemHeaderInfo(int itemID, long count, String name, int picID) {
        this.itemID = itemID;
        this.count = count;
        this.name = name;
        this.picID = picID;
    }

    //default equals generated by intellij
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ItemHeaderInfo)) return false;
        ItemHeaderInfo that = (ItemHeaderInfo) o;
        return itemID == that.itemID && picID == that.picID && count == that.count && Objects.equals(name, that.name);
    }

    /**
     * This might be helpful for debugging. Default generated one.
     * @return string version of object
     */
    @Override
    public String toString() {
        return "ItemHeaderInfo{" +
                "itemID=" + itemID +
                ", picID=" + picID +
                ", count=" + count +
                ", name='" + name + '\'' +
                '}';
    }

    /**
     * Creates and returns a copy of this object.  The precise meaning
     * of "copy" may depend on the class of the object. The general
     * intent is that, for any object {@code x}, the expression:
     * <blockquote>
     * <pre>
     * x.clone() != x</pre></blockquote>
     * will be true, and that the expression:
     * <blockquote>
     * <pre>
     * x.clone().getClass() == x.getClass()</pre></blockquote>
     * will be {@code true}, but these are not absolute requirements.
     * While it is typically the case that:
     * <blockquote>
     * <pre>
     * x.clone().equals(x)</pre></blockquote>
     * will be {@code true}, this is not an absolute requirement.
     * <p>
     * By convention, the returned object should be obtained by calling
     * {@code super.clone}.  If a class and all of its superclasses (except
     * {@code Object}) obey this convention, it will be the case that
     * {@code x.clone().getClass() == x.getClass()}.
     * <p>
     * By convention, the object returned by this method should be independent
     * of this object (which is being cloned).  To achieve this independence,
     * it may be necessary to modify one or more fields of the object returned
     * by {@code super.clone} before returning it.  Typically, this means
     * copying any mutable objects that comprise the internal "deep structure"
     * of the object being cloned and replacing the references to these
     * objects with references to the copies.  If a class contains only
     * primitive fields or references to immutable objects, then it is usually
     * the case that no fields in the object returned by {@code super.clone}
     * need to be modified.
     * <p>
     * The method {@code clone} for class {@code Object} performs a
     * specific cloning operation. First, if the class of this object does
     * not implement the interface {@code Cloneable}, then a
     * {@code CloneNotSupportedException} is thrown. Note that all arrays
     * are considered to implement the interface {@code Cloneable} and that
     * the return type of the {@code clone} method of an array type {@code T[]}
     * is {@code T[]} where T is any reference or primitive type.
     * Otherwise, this method creates a new instance of the class of this
     * object and initializes all its fields with exactly the contents of
     * the corresponding fields of this object, as if by assignment; the
     * contents of the fields are not themselves cloned. Thus, this method
     * performs a "shallow copy" of this object, not a "deep copy" operation.
     * <p>
     * The class {@code Object} does not itself implement the interface
     * {@code Cloneable}, so calling the {@code clone} method on an object
     * whose class is {@code Object} will result in throwing an
     * exception at run time.
     *
     * @return a clone of this instance.
     * @see Cloneable
     */
    @Override
    public ItemHeaderInfo clone() {
        //because every variable in this class is immutable, we merely need to construct
        //  a "shallow copy" of each of the fields
        return new ItemHeaderInfo(itemID, count, name, picID);
    }
}
